const colorInputs = [...document.querySelectorAll("input[type=color]")];
const fontSizeInput = document.querySelector("#font-scale");
const copyButton = document.querySelector(".form__buttons--copy");
const saveButton = document.querySelector(".form__buttons--save");

let colors = [
  "#5f3dc4",
  "#7048e8",
  "#7950f2",
  "#845ef7",
  "#212529",
  "#495057",
  "#ced4da",
  "#f1f3f5",
  "#c92a2a",
  "#087f5b",
  "#f08c00",
  "#c6c7cd",
];

colors.forEach((style, index) => {
  colorInputs[index].value = style;
});

const cssColorVariables = [];
const cssFontSizeVariables = [];
let cssPureSizes = "";

const createColorVariables = () => {
  colors = []
  colorInputs.forEach((input) => {
    const colorVar = `--color-${input.id}: ${input.value};`;
    cssColorVariables.push(colorVar);
    colors.push(input.value);
  });

  return cssColorVariables;
};

const createFontSizeVariables = () => {

  if (!fontSizeInput.value.trim()) {
    return []
  }

  const fontSizeValue = fontSizeInput.value
    .replace(/\s/g, "")
    .split(",")
    .map((value) => Number(value) / 16);

  fontSizeValue.forEach((value, index) => {
    const fontVar = `--font-size-${index + 1}: ${value}rem;`;
    cssFontSizeVariables.push(fontVar);
    cssPureSizes = fontSizeInput.value.replace(/\s/g, "");
  });

  return cssFontSizeVariables;
};

copyButton.addEventListener("click", (e) => {
  e.preventDefault();

  copyButton.innerText = "Copied!";

  setTimeout(() => {
    copyButton.innerText = "Copy Styles";
  }, 3000);

  navigator.clipboard.writeText([
    ...createColorVariables(),
    ...createFontSizeVariables(),
  ].join(""));
});

saveButton.addEventListener("click", (e) => {
  e.preventDefault();

  saveButton.innerText = "Saved!";

  setTimeout(() => {
    saveButton.innerText = "Save Styles";
  }, 3000);

  createColorVariables();
  createFontSizeVariables();

  localStorage.setItem("@colors", JSON.stringify(colors));
  localStorage.setItem("@fonts", JSON.stringify(cssPureSizes));
});

if (localStorage.getItem("@colors")) {
  colors = JSON.parse(localStorage.getItem("@colors"));
  colors.forEach((style, index) => {
    colorInputs[index].value = style;
  });
}

if (localStorage.getItem("@fonts")) {
  fontSizeInput.value = JSON.parse(localStorage.getItem("@fonts"))
}






const inputsColor = [...document.querySelectorAll("input[type=color]")];
const fontSizeInput = document.querySelector("#font-scale")
const copyButton = document.querySelector(".form__buttons--copy")
const saveButton = document.querySelector(".form__buttons--save")
const colors = [
  "#5f3dc4",
  "#7048e8",
  "#7950f2",
  "#845ef7",
  "#212529",
  "#495057",
  "#ced4da",
  "#f1f3f5",
  "#c92a2a",
  "#087f5b",
  "#f08c00",
  "#c6c7cd",
];

colors.forEach((style, index) => {
  inputsColor[index].value = style;
});

const cssColorVariables = []
const cssFontSizeVariables = []
let cssPureSizes = ""


const createColorVariables = () => {
     colors = []
    inputsColor.forEach((input) => {
    const colorVar = ` --color-${input.id}: ${input.value}`
    cssColorVariables.push(colorVar)
    colors.push(input.value)
    })
   
    return cssColorVariables
}


const  createFontSizeVariables = () => {
   
  if (!fontSizeInput.value.trim()) {
    return []
  }


    const fontSizeValue = fontSizeInput.value.replace(/\s/g, "").split(",").map((value) => Number(value) / 16)
  

    fontSizeValue.forEach((value, index) => {
        const fontVar = `--font-size-${index + 1}: ${value} rem`
        cssFontSizeVariables.push(fontVar)
        cssPureSizes = fontSizeInput.value.replace(/\s/g, "")
    })
   
    return cssFontSizeVariables
}





copyButton.addEventListener('click', (event) => {
    event.preventDefault()

    
 copyButton.innerText = "Copied!"

 setTimeout(() => {
    copyButton.innerText = 'Copy Styles'
 },3000)

 navigator.clipboard.writeText([...createColorVariables(), ...createFontSize(),].join(""))   
})




saveButton.addEventListener('click', (e) => {
    e.preventDefault()

    saveButton.innerText = "Saved!"

    setTimeout(() => {
       saveButton.innerText = 'Save Styles'
    },3000)

    createColorVariables();
    createFontSizeVariables();
 
    localStorage.setItem("@colors", JSON.stringify(colors));
    localStorage.setItem("@fonts", JSON.stringify(cssPureSizes));
})

if (localStorage.getItem("@colors")) {
    colors = JSON.parse(localStorage.getItem("@colors"));
    colors.forEach((style, index) => {
        inputsColor[index].value = style;
      });
      
}

if(localStorage.getItem("@fonts")) {
    fontSizeInput.value = JSON.parse(localStorage.getItem("@fonts"))
}



--color-brand-100: #ff0000;--color-brand-200: #7048e8;--color-brand-300: #f25050;--color-brand-400: #845ef7;--color-grey-100: #007dfa;--color-grey-200: #a72f4d;--color-grey-300: #ced4da;--color-grey-400: #f1f3f5;--color-feedback-alert: #c92a2a;--color-feedback-sucess: #087f5b;--color-feedback-warning: #262626;--color-feedback-disable: #c6c7cd;--font-size-1: 7.625rem;--font-size-2: 6944.4375rem;


 --color-brand-100: #5f3dc4;
  --color-brand-200: #7950f2;
  --color-brand-300: #ece8f8;
  --color-grey-100: #212529;
  --color-grey-200: #495057;
  --color-grey-300: #adb5bd;
  --color-grey-400: #e1e7ea;
  --color-grey-500: #f4f6f7;
  --color-grey-600: #f1f3f5;
  --color-grey-700: #ffffff;
  --font-size-1: 1rem;
  --font-size-2: 0.875rem;
  --font-size-3: 0.75rem;

